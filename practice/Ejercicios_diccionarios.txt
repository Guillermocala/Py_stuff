1 - Escribe un programa python que pida un número por teclado y que cree un 
diccionario cuyas claves sean desde el número 1 hasta el número indicado, y
los valores sean los cuadrados de las claves.

2 - Escribe un programa que lea una cadena y devuelva un diccionario con la 
cantidad de apariciones de cada carácter en la cadena.

3 - Vamos a crear un programa en python donde vamos a declarar un diccionario 
para guardar los precios de las distintas frutas. El programa pedirá el nombre
de la fruta y la cantidad que se ha vendido y nos mostrará el precio final 
de la fruta a partir de los datos guardados en el diccionario. Si la fruta 
no existe nos dará un error. Tras cada consulta el programa nos preguntará 
si queremos hacer otra consulta.

4 - Codifica un programa en python que nos permita guardar los nombres de los 
alumnos de una clase y las notas que han obtenido. Cada alumno puede tener 
distinta cantidad de notas. Guarda la información en un diccionario cuya 
claves serán los nombres de los alumnos y los valores serán listas con las 
notas de cada alumno.
El programa pedirá el número de alumnos que vamos a introducir, pedirá su 
nombre e irá pidiendo sus notas hasta que introduzcamos un número negativo.
Al final el programa nos mostrará la lista de alumnos y la nota media 
obtenida por cada uno de ellos. Nota: si se introduce el nombre de un 
alumno que ya existe el programa nos dará un error.

5 - Escribir un programa que implemente una agenda. En la agenda se podrán 
guardar nombres y números de teléfono. El programa nos dará el siguiente menú:
    -Añadir/modificar: Nos pide un nombre. Si el nombre se encuentra en la 
    agenda, debe mostrar el teléfono y, opcionalmente, permitir modificarlo 
    si no es correcto. Si el nombre no se encuentra, debe permitir ingresar 
    el teléfono correspondiente.
    -Buscar: Nos pide una cadena de caracteres, y nos muestras todos los 
    contactos cuyos nombres comiencen por dicha cadena.
    -Borrar: Nos pide un nombre y si existe nos preguntará si queremos 
    borrarlo de la agenda.
    -Listar: Nos muestra todos los contactos de la agenda.
Implementar el programa con un diccionario.

6 - Escribir un programa que guarde en una variable el diccionario 
{'Euro':'€', 'Dollar':'$', 'Yen':'¥'}, pregunte al usuario por una divisa y 
muestre su símbolo o un mensaje de aviso si la divisa no está en el diccionario.

7 - Escribir un programa que pregunte al usuario su nombre, edad, dirección y 
teléfono y lo guarde en un diccionario. Después debe mostrar por pantalla el 
mensaje <nombre> tiene <edad> años, vive en <dirección> y su número de 
teléfono es <teléfono>.

8 - Escribir un programa que guarde en un diccionario los precios de las 
frutas de la tabla, pregunte al usuario por una fruta, un número de kilos 
y muestre por pantalla el precio de ese número de kilos de fruta. Si la fruta 
no está en el diccionario debe mostrar un mensaje informando de ello.

9 - Escribir un programa que pregunte una fecha en formato dd/mm/aaaa y muestre 
por pantalla la misma fecha en formato dd de <mes> de aaaa; Donde <mes> es el 
nombre del mes.

10 - Escribir un programa que almacene el diccionario con los créditos de las 
asignaturas de un curso {'Matemáticas': 6, 'Física': 4, 'Química': 5} y 
después muestre por pantalla los créditos de cada asignatura en el formato 
<asignatura> tiene <créditos> créditos, donde <asignatura> es cada una de 
las asignaturas del curso, y <créditos> son sus créditos. Al final debe 
mostrar también el número total de créditos del curso.

11 - Escribir un programa que cree un diccionario vacío y lo vaya llenado con 
información sobre una persona (por ejemplo nombre, edad, sexo, teléfono, 
correo electrónico, etc.) que se le pida al usuario. Cada vez que se añada 
un nuevo dato debe imprimirse el contenido del diccionario.

12 - Escribir un programa que cree un diccionario simulando una cesta de la 
compra. El programa debe preguntar el artículo y su precio y añadir el par 
al diccionario, hasta que el usuario decida terminar. Después se debe mostrar
por pantalla la lista de la compra y el coste total, con el siguiente formato:
lista de compra
articulo1   precio
articulo2   precio
total       coste

13 - Escribir un programa que cree un diccionario de traducción español-inglés.
El usuario introducirá las palabras en español e inglés separadas por dos 
puntos, y cada par <palabra>:<traducción> separados por comas. El programa 
debe crear un diccionario con las palabras y sus traducciones. Después pedirá 
una frase en español y utilizará el diccionario para traducirla palabra a 
palabra. Si una palabra no está en el diccionario debe dejarla sin traducir.

14 - Escribir un programa que gestione las facturas pendientes de cobro de una 
empresa. Las facturas se almacenarán en un diccionario donde la clave de cada 
factura será el número de factura y el valor el coste de la factura. El programa 
debe preguntar al usuario si quiere añadir una nueva factura, pagar una 
existente o terminar. Si desea añadir una nueva factura se preguntará por el 
número de factura y su coste y se añadirá al diccionario. Si se desea pagar 
una factura se preguntará por el número de factura y se eliminará del diccionario.
Después de cada operación el programa debe mostrar por pantalla la cantidad 
cobrada hasta el momento y la cantidad pendiente de cobro.

15 - Escribir un programa que permita gestionar la base de datos de clientes 
de una empresa. Los clientes se guardarán en un diccionario en el que la clave 
de cada cliente será su NIF, y el valor será otro diccionario con los datos 
del cliente (nombre, dirección, teléfono, correo, preferente), donde preferente 
tendrá el valor True si se trata de un cliente preferente. El programa debe
preguntar al usuario por una opción del siguiente menú: (1) Añadir cliente, 
(2) Eliminar cliente, (3) Mostrar cliente, (4) Listar todos los clientes, 
(5) Listar clientes preferentes, (6) Terminar. 
En función de la opción elegida el programa tendrá que hacer lo siguiente:
    -Preguntar los datos del cliente, crear un diccionario con los datos y 
    añadirlo a la base de datos.
    -Preguntar por el NIF del cliente y eliminar sus datos de la base de datos.
    -Preguntar por el NIF del cliente y mostrar sus datos.
    -Mostrar lista de todos los clientes de la base datos con su NIF y nombre.
    -Mostrar la lista de clientes preferentes de la base de datos con su NIF y nombre.
Terminar el programa.

16 - El directorio de los clientes de una empresa está organizado en una 
cadena de texto como la de más abajo, donde cada línea contiene la información 
del nombre, email, teléfono, nif, y el descuento que se le aplica. Las líneas 
se separan con el carácter de cambio de línea \n y la primera línea contiene 
los nombres de los campos con la información contenida en el directorio.

"nif;nombre;email;teléfono;descuento
\n01234567L;Luis González;luisgonzalez@mail.com;656343576;12.5
\n71476342J;Macarena Ramírez;macarena@mail.com;692839321;8
\n63823376M;Juan José Martínez;juanjo@mail.com;664888233;5.2
\n98376547F;Carmen Sánchez;carmen@mail.com;667677855;15.7"

Escribir un programa que genere un diccionario con la información del directorio
donde cada elemento corresponda a un cliente y tenga por clave su nif y por 
valor otro diccionario con el resto de la información del cliente. Los 
diccionarios con la información de cada cliente tendrán como claves los 
nombres de los campos y como valores la información de cada cliente 
correspondientes a los campos. Es decir, un diccionario como el siguiente:

{'01234567L': {'nombre': 'Luis González', 'email': 'luisgonzalez@mail.com', 
'teléfono': '656343576', 'descuento': 12.5}, '71476342J': {'nombre': 'Macarena 
Ramírez', 'email': 'macarena@mail.com', 'teléfono': '692839321', 
'descuento': 8.0}, '63823376M': {'nombre': 'Juan José Martínez', 'email': 
'juanjo@mail.com', 'teléfono': '664888233', 'descuento': 5.2}, '98376547F': 
{'nombre': 'Carmen Sánchez', 'email': 'carmen@mail.com', 'teléfono': '667677855',
 'descuento': 15.7}}